from django.http import JsonResponse
from django.templatetags.static import static
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status

from .models import Product, Order, OrderItem, Restaurant


def banners_list_api(request):
    print("üü¢ [API] –ó–∞–ø—Ä–æ—Å –±–∞–Ω–Ω–µ—Ä–æ–≤")
    # FIXME move data to db?
    return JsonResponse([
        {
            'title': 'Burger',
            'src': static('burger.jpg'),
            'text': 'Tasty Burger at your door step',
        },
        {
            'title': 'Spices',
            'src': static('food.jpg'),
            'text': 'All Cuisines',
        },
        {
            'title': 'New York',
            'src': static('tasty.jpg'),
            'text': 'Food is incomplete without a tasty dessert',
        }
    ], safe=False, json_dumps_params={
        'ensure_ascii': False,
        'indent': 4,
    })


def product_list_api(request):
    print("üü¢ [API] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    products = Product.objects.select_related('category').available()

    dumped_products = []
    for product in products:
        dumped_product = {
            'id': product.id,
            'name': product.name,
            'price': product.price,
            'special_status': product.special_status,
            'description': product.description,
            'category': {
                'id': product.category.id,
                'name': product.category.name,
            } if product.category else None,
            'image': product.image.url,
            'restaurant': {
                'id': product.id,
                'name': product.name,
            }
        }
        dumped_products.append(dumped_product)
    return JsonResponse(dumped_products, safe=False, json_dumps_params={
        'ensure_ascii': False,
        'indent': 4,
    })


@api_view(['GET', 'POST'])
def register_order(request):
    if request.method == 'GET':
        # –ü–†–û–í–ï–†–Ø–ï–ú –ë–ê–ó–£ –î–ê–ù–ù–´–• –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú –ó–ê–ö–ê–ó–ê
        errors = []

        # 1. –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ï–°–¢–¨ –ü–†–û–î–£–ö–¢–´ –í –ë–ê–ó–ï
        products_count = Product.objects.count()
        if products_count == 0:
            errors.append('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞')

        # 2. –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ï–°–¢–¨ –î–û–°–¢–£–ü–ù–´–ï –ü–†–û–î–£–ö–¢–´
        available_products = Product.objects.available().count()
        if available_products == 0:
            errors.append('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞')

        # 3. –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ï–°–¢–¨ –†–ï–°–¢–û–†–ê–ù–´
        restaurants_count = Restaurant.objects.count()
        if restaurants_count == 0:
            errors.append('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤')

        # 4. –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –†–ï–°–¢–û–†–ê–ù–´ –ò–ú–ï–Æ–¢ –ú–ï–ù–Æ
        restaurants_with_menu = Restaurant.objects.filter(menu_items__availability=True).distinct().count()
        if restaurants_with_menu == 0:
            errors.append('–ù–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ–Ω—é')

        if errors:
            return Response({
                'status': 'error',
                'message': '–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑',
                'errors': errors,
                'database_status': {
                    'total_products': products_count,
                    'available_products': available_products,
                    'total_restaurants': restaurants_count,
                    'restaurants_with_menu': restaurants_with_menu
                }
            }, status=status.HTTP_400_BAD_REQUEST)

        # –ï–°–õ–ò –í–°–ï –û–ö - –í–û–ó–í–†–ê–©–ê–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ
        return Response({
            'status': 'ready',
            'message': '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –∑–∞–∫–∞–∑–æ–≤',
            'database_status': {
                'total_products': products_count,
                'available_products': available_products,
                'total_restaurants': restaurants_count,
                'restaurants_with_menu': restaurants_with_menu
            },
            'required_fields': ['firstname', 'lastname', 'phonenumber', 'address', 'products'],
            'usage_example': {
                'method': 'POST',
                'url': '/api/order/',
                'body': {
                    'firstname': '–ò–≤–∞–Ω',
                    'lastname': '–ü–µ—Ç—Ä–æ–≤',
                    'phonenumber': '+79161234567',
                    'address': '—É–ª. –õ–µ–Ω–∏–Ω–∞, 10',
                    'products': [{'product': 1, 'quantity': 2}]
                }
            }
        })

    elif request.method == 'POST':
        print("üü¢ [API] –ó–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞")
        print(f"üü¢ –ú–µ—Ç–æ–¥: {request.method}")
        print(f"üü¢ Content-Type: {request.content_type}")

        try:
            # –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –î–ê–ù–ù–´–ï –ù–ï –ü–£–°–¢–´–ï
            if not request.data:
                print("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
                return Response({
                    'status': 'error',
                    'message': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å',
                    'errors': ['–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'],
                    'debug': {'received_data': 'empty'}
                }, status=status.HTTP_400_BAD_REQUEST)

            data = request.data
            errors = []

            print(f"üü¢ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

            # –í–ê–õ–ò–î–ê–¶–ò–Ø –û–°–ù–û–í–ù–´–• –ü–û–õ–ï–ô
            required_fields = ['firstname', 'lastname', 'phonenumber', 'address', 'products']
            for field in required_fields:
                if field not in data:
                    error_msg = f'–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "{field}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")
                elif not data[field]:
                    error_msg = f'–ü–æ–ª–µ "{field}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")

            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
            if 'firstname' in data and data['firstname']:
                firstname = data['firstname']
                if not isinstance(firstname, str) or len(firstname.strip()) < 2:
                    error_msg = '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –º–∏–Ω–∏–º—É–º –∏–∑ 2 —Å–∏–º–≤–æ–ª–æ–≤'
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")

            if 'lastname' in data and data['lastname']:
                lastname = data['lastname']
                if not isinstance(lastname, str) or len(lastname.strip()) < 2:
                    error_msg = '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –º–∏–Ω–∏–º—É–º –∏–∑ 2 —Å–∏–º–≤–æ–ª–æ–≤'
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")

            if 'phonenumber' in data and data['phonenumber']:
                phonenumber = data['phonenumber']
                if not isinstance(phonenumber, str) or len(phonenumber.strip()) < 5:
                    error_msg = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º'
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")

            if 'address' in data and data['address']:
                address = data['address']
                if not isinstance(address, str) or len(address.strip()) < 5:
                    error_msg = '–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤'
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")

            # –í–ê–õ–ò–î–ê–¶–ò–ê –ü–†–û–î–£–ö–¢–û–í
            if 'products' in data:
                products = data['products']
                if not isinstance(products, list):
                    error_msg = '–ü–æ–ª–µ "products" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º'
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")
                elif not products:
                    error_msg = '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")
                else:
                    print(f"üü¢ –ü—Ä–æ–¥—É–∫—Ç—ã: {products}")
                    for i, product_data in enumerate(products, 1):
                        product_errors = []

                        if not isinstance(product_data, dict):
                            error_msg = f'–ü—Ä–æ–¥—É–∫—Ç #{i}: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º'
                            product_errors.append(error_msg)
                            print(f"‚ùå {error_msg}")
                            continue

                        product_id = product_data.get('product')
                        quantity = product_data.get('quantity', 1)

                        print(f"üü¢ –ü—Ä–æ–¥—É–∫—Ç #{i}: ID={product_id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ={quantity}")

                        # –í–ê–õ–ò–î–ê–¶–ò–Ø ID –ü–†–û–î–£–ö–¢–ê
                        if product_id is None:
                            error_msg = f'–ü—Ä–æ–¥—É–∫—Ç #{i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞'
                            product_errors.append(error_msg)
                            print(f"‚ùå {error_msg}")
                        elif not isinstance(product_id, int):
                            error_msg = f'–ü—Ä–æ–¥—É–∫—Ç #{i}: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
                            product_errors.append(error_msg)
                            print(f"‚ùå {error_msg}")
                        elif product_id <= 0:
                            error_msg = f'–ü—Ä–æ–¥—É–∫—Ç #{i}: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
                            product_errors.append(error_msg)
                            print(f"‚ùå {error_msg}")

                        # –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê
                        if not isinstance(quantity, int):
                            error_msg = f'–ü—Ä–æ–¥—É–∫—Ç #{i}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º'
                            product_errors.append(error_msg)
                            print(f"‚ùå {error_msg}")
                        elif quantity < 1:
                            error_msg = f'–ü—Ä–æ–¥—É–∫—Ç #{i}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º'
                            product_errors.append(error_msg)
                            print(f"‚ùå {error_msg}")
                        elif quantity > 100:
                            error_msg = f'–ü—Ä–æ–¥—É–∫—Ç #{i}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100'
                            product_errors.append(error_msg)
                            print(f"‚ùå {error_msg}")

                        if product_errors:
                            errors.extend(product_errors)

            # –ï–°–õ–ò –ï–°–¢–¨ –û–®–ò–ë–ö–ò - –í–û–ó–í–†–ê–©–ê–ï–ú –û–¢–í–ï–¢
            if errors:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏: {errors}")
                return Response({
                    'status': 'error',
                    'message': '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞',
                    'errors': errors,
                    'received_data': data
                }, status=status.HTTP_400_BAD_REQUEST)

            # –í–°–ï –î–ê–ù–ù–´–ï –í–ê–õ–ò–î–ù–´ - –°–û–ó–î–ê–ï–ú –ó–ê–ö–ê–ó
            print("üì¶ –ù–û–í–´–ô –ó–ê–ö–ê–ó:")
            import json
            print(json.dumps(data, ensure_ascii=False, indent=2))

            order = Order.objects.create(
                firstname=data['firstname'].strip(),
                lastname=data['lastname'].strip(),
                phonenumber=data['phonenumber'].strip(),
                address=data['address'].strip(),
            )

            print("‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã:")
            missing_products = []
            valid_products = []

            for product_data in data['products']:
                product_id = product_data['product']
                quantity = product_data['quantity']

                try:
                    product = Product.objects.get(id=product_id)
                    OrderItem.objects.create(
                        order=order,
                        product=product,
                        quantity=quantity,
                        price=product.price
                    )
                    valid_products.append({
                        'id': product_id,
                        'name': product.name,
                        'quantity': quantity,
                        'price': str(product.price)
                    })
                    print(f"  ‚úÖ {product.name} x{quantity}")
                except Product.DoesNotExist:
                    error_msg = f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
                    missing_products.append({
                        'product_id': product_id,
                        'error': error_msg
                    })
                    print(f"  ‚ùå {error_msg}")
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
                    missing_products.append({
                        'product_id': product_id,
                        'error': error_msg
                    })
                    print(f"  ‚ùå {error_msg}")

            print(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")

            # –§–û–†–ú–ò–†–£–ï–ú –û–¢–í–ï–¢
            response_data = {
                'order_id': order.id,
                'status': 'success',
                'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
                'customer': {
                    'firstname': order.firstname,
                    'lastname': order.lastname,
                    'phonenumber': str(order.phonenumber),
                    'address': order.address
                },
                'added_products': valid_products,
            }

            if missing_products:
                response_data['status'] = 'partial_success'
                response_data['message'] = '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
                response_data['missing_products'] = missing_products
                return Response(response_data, status=status.HTTP_207_MULTI_STATUS)

            return Response(response_data)

        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return Response({
                'status': 'error',
                'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                'error': str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    else:
        return Response({
            'status': 'error',
            'message': '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω',
            'errors': [f'–ú–µ—Ç–æ–¥ {request.method} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è']
        }, status=status.HTTP_405_METHOD_NOT_ALLOWED)
